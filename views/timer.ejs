<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

<style>
    body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
  overflow-x: hidden;
}

header {
  background-color: #333;
  color: #fff;
  padding: 1em;
}

nav ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

nav li {
  display: inline;
  margin-right: 20px;
}

main {
  display: flex;
  flex-wrap: wrap;
}

.sidebar {
  background-color: #333;
  color: #fff;
  padding: 20px;
  width: 200px;
  min-height: 100vh;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.sidebar ul {
  padding: 0;
  list-style: none;
}

.sidebar li {
  margin-bottom: 10px;
}

.sidebar a {
  text-decoration: none;
  color: #fff;
  font-size: 18px;
}

.sidebar a.active {
  font-weight: bold;
}

.task-manager {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  flex: 1;
  margin-left: 20px;
}

#create-task-btn {
  background-color: #4caf50;
  color: #fff;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

#task-list {
  list-style: none;
  padding: 0;
}

.task-item {
  border: 1px solid #ddd;
  margin: 10px 0;
  padding: 10px;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
}

.task-details {
  display: flex;
  align-items: center;
}

.task-title {
  font-size: 18px;
  margin-right: 10px;
}

.task-timer {
  font-size: 16px;
  color: #333;
}

.add-task-button {
  position: fixed;
  bottom: 20px;
  right: 20px;
}

#add-task-btn {
  background-color: #3498db;
  color: #fff;
  border: none;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  font-size: 24px;
  cursor: pointer;
}



body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
  overflow-x: hidden; 
}




header {
    text-align: center;
    background-color: #333;
    color: #fff;
    padding: 1em;
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 1000;
}

main {
  display: flex;
  flex-wrap: wrap;
  margin-top: 60px;
}

.sidebar {
  background-color: #333;
  color: #fff;
  padding: 20px;
  width: 200px;
  min-height: 100vh;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  position: fixed;
  top: 60px; 
  z-index: 999;
}



.sidebar {
  background-color: #333;
  color: #fff;
  padding: 20px;
  width: 200px;
  min-height: 100vh;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  transform: translateX(-100%); 
  transition: transform 0.3s ease-in-out;
}

.sidebar.visible {
  transform: translateX(0); 
}
.task-manager {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  flex: 1;
  margin-left: 20px;
  transition: margin-left 0.3s ease-in-out; 
}

.sidebar.visible + .task-manager {
  margin-left: 270px;
}

.task-manager {
    margin-right: 20px;
    margin-top: 40px;
}

#task-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

.task-card {
  background-color: #ffffff;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 20px;
  width: 200px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s;
  display: flex;
  flex-direction: column;
}

.task-card:hover {
  transform: translateY(-5px);
}

.done {
  color: #2ecc71; 
}

.not-done {
  color: #e74c3c; 
}

.button-container {
  margin-top: auto;
  display: flex;
  justify-content: space-between;
}

.button {
  background-color: #3498db; 
  color: #ffffff;
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.button:hover {
  background-color: #2980b9; 
}

header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 6em;
  padding-top: 0;
  padding-bottom: 0;
}

.logo {
  margin-right: 50%;
}

form#delete-form {
  border-radius: 30px;
  background-color: white;
}
.red {
  background-color: rgb(161, 61, 61);
  padding: 7px;
  font-size: 16px;
  font-weight: 500;
  color: white;
  border-radius: 12px;
  box-shadow: 0px 0px 15px #888888;
  /* width: 30%; */

}

.blue {
  padding: 7px;
  border-radius: 12px;
  background-color: #3498db;
  background-color: rgb(52, 219, 80);
  font-size: 16px;
  font-weight: 500;
  /* width: 2rem; */
  /* color: white; */
  box-shadow: 0px 0px 15px #888888;
}

button:hover{
  cursor: pointer;
}
#delete-form {
  padding: 0px;
}

.task-card {
  box-shadow: 0px 0px 15px #888888;
}

.button-container {
  display: flex;
  /* justify-content: end; */
  /* gap: 8px; */
  justify-content: space-between;
}
  #toggle-sidebar-btn {
    padding: 5px 10px;
    font-size: 15px;
  }

  .container {
    /* margin-top: 10%;
    margin-left: 20%; */

    display: flex;
    width: 420px;
    padding: 50px 0;
    background-color: #fff;
    border-radius: 8px;
    flex-direction: column;
    align-items: center;
    row-gap: 30px;
}

.circular-progress {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 250px;
    height: 250px;
    border-radius: 50%;
    background: conic-gradient(black 3.6deg, #ededed 0deg);
}

.circular-progress::before {
    content: "";
    position: absolute;
    width: 210px;
    height: 210px;
    background-color: gray;
    border-radius: 50%;
}

.progress-value {
    position: relative;
    font-size: 40px;
    font-weight: 600;
    color: black;
}

.text {
    font-size: 30px;
    font-weight: 500;
    color: #555;   
}


.container {
    /* background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    flex: 1;
    margin-left: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    flex: 1;
    margin-left: 20px;
    transition: margin-left 0.3s ease-in-out; 
    margin-left: 20px;
    margin-right: 270px;
    margin-top: 40px;
    width: 100%; */
    /* margin-left: 20rem; */
    background-color: #3498db;
            color: #fff;
            /* padding: 20px; */
            border-radius: 15px;
            /* position: fixed;
            left: 10%; */
            /* display: block; */
            /* position:relative; */
            
            /* margin-left: 20em;
        margin-right: 20%; */
}

#task-manager  {
    padding-top: 150px;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 30px;
    /* background-color: #2ecc71; */
}


.buttons {
  display: flex;
  /* flex-direction: column; */
  justify-content: space-around;
  gap: 100px;
}

.buttons > * {
  /* width: 20%; */
  padding: 15px;
  font-size: 20px;
  font-weight: 700;
  border-radius: 20px;
}

.container {
    align-items: center;
}

#start-timer {
  background-color: green;
}

#stop-timer {
  background-color: red;
}

button:disabled {
  background-color: gray !important;
  cursor:wait !important;
}

</style>
<script>
  function toTime(timeSec) {

let hours = 0, mins = 0, secs = 0;

if(timeSec > 0) {
  hours = Math.floor(timeSec / (60 * 60));
  timeSec -= hours * 60 * 60;

  mins  = Math.floor(timeSec / (60));
  timeSec -= mins * 60;

  secs = timeSec;
}

return `${hours}:${mins}:${secs}`;
}
</script>
</head>
<body>

    <header>
        <button id="toggle-sidebar-btn">&#9776;</button>
        <h3 class="logo">Productivity Tracker</h3>
    </header>
  
    <main>
      <aside class="sidebar">
        <div class="profile">
          <img src="<%= hero.profilePic %>" id="profile-image">
          <div><%= hero.username %></div>
        </div>
      <ul>
        <li><a href="/users/dashboard">Dashboard</a></li>
        <li><a href="/tasks/all" class="">All Tasks</a></li>
        <li><a href="/tasks/completed" class="">Completed</a></li>
        <li><a href="/tasks/notCompleted" class="">Not Completed</a></li>
        <li><a href="#" onclick="logout()">Logout</a></li>
      </ul>

        <section id="task-manager">
            <div class="container">
                <div class="circular-progress">
                  <span class="progress-value"></span>
                </div>
                <span class="text">Time Remaining</span>
            </div>
            <div class="buttons">
              <button id="start-timer">Start</button>
              <button id="stop-timer">Stop</button>
            </div>
        </section>
        
    </main>
  
    <div class="add-task-button">
        <a href="/tasks/add">
            <button id="add-task-btn" href="localhost:3000/tasks/add">+</button>

        </a>
    </div>

    
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
  
    <script>
      
      const startTimer = document.getElementById('start-timer');
      const stopTimer = document.getElementById('stop-timer');
      const socket = io();

        document.addEventListener('DOMContentLoaded', () => {
          const toggleSidebarBtn = document.getElementById('toggle-sidebar-btn');
          const sidebar = document.querySelector('.sidebar');
          const taskManager = document.getElementById('task-manager');
          const taskContainer = document.getElementById('task-container');

      
          toggleSidebarBtn.addEventListener('click', function () {
            sidebar.classList.toggle('visible');
            const isSidebarVisible = sidebar.classList.contains('visible');
            taskManager.style.marginLeft = isSidebarVisible ? '270px' : '20px';
            taskContainer.style.marginLeft = isSidebarVisible ? '270px' : '20px';
          });


          // console.log('connected to server!!!!!!!!!!');

          socket.on('message', (message) => {
            const messagesDiv = document.getElementById('messages');
            if(messagesDiv)
              messagesDiv.innerHTML += `<p>${message}</p>`;
          });
          
          function sendTwoSeconds() {
            socket.emit('two-sec');
          }
          
          // start.addEventListener('click', () => {
          //   setInterval(sendTwoSeconds, 2000);
            
          // })
          
          
        })
      

        let running = false;

        startTimer.addEventListener('click', () => {
          // 1- Disable start button
          startTimer.disabled = true;
          // 2- Enable stop button
          stopTimer.disabled = false;
          // 3- start the timer
          startTask();
          running = true;
          
      
        });


        stopTimer.addEventListener('click', () => {
          // 1- Disable stop button
          stopTimer.disabled = true;
          // 2- Enable start button
          startTimer.disabled = false;
          // 3- stop the timer
          stopTask();
          running = false;
        });




        
  


        let circularProgress = document.querySelector('.circular-progress');
        let progressValue = document.querySelector('.progress-value'); 
        
        let originalValue = "<%= task.time %>";
        let progressEndValue = "<%= task.remainingTime %>";
        
        let progressStartValue = originalValue - progressEndValue;
        speed = 1000;
        
        let remaining = originalValue - progressStartValue;
        
        let intervalId;
        
        function startTask () {
            intervalId = setInterval(() => {
              if(running) {
                progressStartValue ++;
                remaining = originalValue - progressStartValue;
      
                progressValue.textContent = `${toTime(remaining)}`;
      
                circularProgress.style.background = `conic-gradient(#000000 ${(progressStartValue / originalValue)*100 * 3.6}deg, #ededed 0deg)`
                if(progressStartValue == progressEndValue) {
                    clearInterval(progress);
                }
                  console.log(progressStartValue);
                socket.emit('second', { id: "<%= task._id %>"});

              }
          }, speed)
        }


        // This runs at the beginning of running this view to display the remaining time on the timer
        // it runs for only one sec not to affect the actual remaining time..
        (function initializeTask () {
          
          const intervalId = setInterval(() => {
            if (1) {
              progressStartValue ++;
                remaining = originalValue - progressStartValue;
      
                progressValue.textContent = `${toTime(remaining)}`;
      
                circularProgress.style.background = `conic-gradient(#000000 ${(progressStartValue / originalValue)*100 * 3.6}deg, #ededed 0deg)`
                if(progressStartValue == progressEndValue) {
                    clearInterval(progress);
                }
            }
          }, 1);

          setTimeout(() => {
            clearInterval(intervalId);
          }, 1);
        })()
        
        function stopTask () {
          clearInterval(intervalId);
        
        }



        
        
        function logout() {
        // Create a form element
        const form = document.createElement('form');
        form.method = 'POST'; // Set the HTTP method to POST
        form.action = '/users/auth/logout'; // Set the form action to the logout endpoint
  
        // Append the form to the body
        document.body.appendChild(form);
  
        // Create a submit button and append it to the form
        const submitBtn = document.createElement('input');
        submitBtn.type = 'submit';
        form.appendChild(submitBtn);
  
        // Submit the form
        form.submit();
      }
    </script>
</body>
</html>